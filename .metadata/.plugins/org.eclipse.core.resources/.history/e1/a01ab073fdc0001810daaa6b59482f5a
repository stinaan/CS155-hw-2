package hw2;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
public class BankSystem {
	public static ArrayList<Account> bankAList = new ArrayList<Account>();
	public static ArrayList<Account> bankBList = new ArrayList<Account>();
	public static Integer moneyInBank;
	public BankSystem()
	{
		
	}
	
	public static void loadAccounts() throws FileNotFoundException
	{
		File file = new File("cardList.txt");
		System.out.println(file.getAbsolutePath());
		Scanner fin = new Scanner(file);
		int i=0;
		while(fin.hasNextLine())
		{
			String line = fin.nextLine();

			//System.out.println("B"+i++);

		//	System.out.println("A"+bankAList.size());
			//System.out.println("B"+bankBList.size());
			if(line.equals("A"))
			{
				Account acc = new Account(fin.nextLine(),fin.nextLine(),fin.nextLine(),fin.nextLine());
				bankAList.add(acc);
		//		System.out.println(Account.getBankID());
			//	System.out.println(Account.getExpDate());
			//	System.out.println(Account.getPassword());
				//System.out.println("o");
			}
			else if(line.equals("B"))
			{
				Account acc = new Account(fin.nextLine(),fin.nextLine(),fin.nextLine(), fin.nextLine());
				bankBList.add(acc);

	//			System.out.println(Account.getBankID());
		//		System.out.println(Account.getExpDate());
			//	System.out.println(Account.getPassword());
			//	System.out.println("hi");
			}
		}
	//	System.out.println("a"+bankAList.size());
		//System.out.println("b"+bankBList.size());
		
		fin.close();
		return;
	}
	
	
	public static Account checkBankA(String cardNum)
	{
		while (!bankAList.isEmpty())
		{
			System.out.println("1");
			for(int i = 0; i<bankAList.size(); i++)
			{
				System.out.println("2");
				String id = bankAList.get(i).getBankID();
				if (cardNum.equals(id))
				{
					System.out.println("3");
					moneyInBank = Integer.parseInt(Account.getAmount());
							
					return bankAList.get(i);
				}
			}
			
		}
		return null;
	}
	
	public static Integer getMoneyInBank()
	{
		return moneyInBank;
	}
	
	public static void withdraw(Integer amount)
	{
		moneyInBank = moneyInBank-amount;
	}
	
	
	







}



